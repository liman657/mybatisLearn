<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.learn.chapter03.dao.UserMapper">

    <resultMap id="BaseResultMap" type="com.learn.chapter03.domain.SysUser">
        <result column="id" jdbcType="INTEGER" property="id"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="user_password" jdbcType="VARCHAR" property="userPassword"/>
        <result column="user_email" jdbcType="VARCHAR" property="userEmail"/>
        <result column="user_info" jdbcType="VARCHAR" property="userInfo"/>
        <result column="head_img" jdbcType="BLOB" property="headImg"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    </resultMap>

    <!--<settings>-->
        <!--<setting name="mapUnderscoreToCamelCase" value="true"></setting>-->
    <!--</settings>-->

    <select id="getUserById" resultMap="BaseResultMap">
        select * from sys_user where id = #{id}
    </select>

    <select id="selectAll" resultMap="BaseResultMap">
--         select
--         id,user_name userName, user_password userPassword, user_email userEmail,user_info userInfo,head_img headImg,create_time createTime
--         from sys_user;
        select * from sys_user;
    </select>

    <!--<select id="selectRolesByUserId" resultType="com.learn.chapter02.domain.SysRole">-->
        <!--select-->
          <!--r.id,-->
          <!--r.role_name roleName,-->
          <!--r.enabled,-->
          <!--r.create_by createBy,-->
          <!--r.create_time createTime-->
        <!--from sys_user u-->
        <!--inner join sys_user_role ur on u.id = ur.user_id-->
        <!--inner join sys_role r on ur.role_id = r.id where u.id = #{userId}-->
    <!--</select>-->

    <!--级联查询，获取用户的userName，用一个新对象来承接参数-->
    <!--<select id="selectRolesByUserId" resultType="com.learn.chapter02.domain.SysRoleExtend">-->
        <!--select-->
          <!--r.id,-->
          <!--r.role_name roleName,-->
          <!--r.enabled,-->
          <!--r.create_by createBy,-->
          <!--r.create_time createTime,-->
          <!--u.user_name-->
        <!--from sys_user u-->
        <!--inner join sys_user_role ur on u.id = ur.user_id-->
        <!--inner join sys_role r on ur.role_id = r.id where u.id = #{userId}-->
    <!--</select>-->

    <!--通过内嵌对象，实现级联查询-->
    <select id="selectRolesByUserId" resultType="com.learn.chapter03.domain.SysRole">
        select
          r.id,
          r.role_name roleName,
          r.enabled,
          r.create_by createBy,
          r.create_time createTime,
          u.user_name as "sysUser.userName",
          u.user_email as "sysUser.userEmail"
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id where u.id = #{userId}
    </select>

    <insert id="insertUser">
        insert into sys_user (id,user_name,user_password,user_email,user_info,head_img,create_time)
        values(#{id},#{userName},#{userPassword},#{userEmail},#{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType=DATE})
    </insert>

    <!--
        插入数据库后获得自增主键，使用JDBC方式
        useGeneratedKeys配置成true之后，会使用JDBC的getGeneratedKey方法的主键，然后将其赋值给keyProperty配置的属性值
        但是这种方式只是使用于提供主键自增功能的数据库
    -->
    <insert id = "insertUserTwo" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user (user_name,user_password,user_email,user_info,head_img,create_time)
        values(#{userName},#{userPassword},#{userEmail},#{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType=TIMESTAMP})

    </insert>

    <insert id="insertUserThird">
        insert into sys_user (user_name,user_password,user_email,user_info,head_img,create_time)
        values (#{userName},#{userPassword},#{userEmail},#{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType=TIMESTAMP})
        <selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()<!--MySQL中自动获取主键的函数-->
        </selectKey>
    </insert>

    <!--update的用法-->
    <update id="updateUserById">
        update sys_user
        set
          user_name = #{userName},
          user_password = #{userPassword},
          user_email = #{userEmail},
          user_info = #{userInfo},
          head_img = #{headImg,jdbcType=BLOB},
          create_time = #{createTime,jdbcType=TIMESTAMP}
        where id = #{id}
    </update>

    <delete id="deleteUserById">

        delete from sys_user where id = #{id}

    </delete>

    <select id="selectRolesByUserIdAndRoleEnabled" resultType="com.learn.chapter03.domain.SysRole">

        select
          r.id,
          r.role_name roleName,
          r.enabled,
          r.create_by createBy,
          r.create_time createTime
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        where u.id = #{userId} and r.enabled = #{enabled}

    </select>
</mapper>
